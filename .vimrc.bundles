if &compatible
  set nocompatible
end
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Bundle "tpope/vim-surround"
Bundle 'altercation/vim-colors-solarized'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'w0rp/ale'
Bundle 'rking/ag.vim'
Bundle 'shougo/vimshell'
Bundle 'shougo/vimproc'
Bundle 'kien/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdcommenter'
Bundle 'miyakogi/conoline.vim'
Bundle "matze/vim-move"
Bundle 'CodeFalling/fcitx-vim-osx'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'Valloric/YouCompleteMe'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'tomasr/molokai'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'dyng/ctrlsf.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'vim-scripts/Mark--Karkat'
Bundle 'Raimondi/delimitMate'
Bundle "tpope/vim-repeat"
Bundle "tpope/vim-fugitive"
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'terryma/vim-smooth-scroll'
Bundle 'Shougo/neocomplete.vim'
"Bundle 'timakro/vim-searchant'
"Bundle 'inside/vim-search-pulse'
"Bundle 'hongqn/vim-osx-ime', {*/
"   \  'build' : {
"   \    'mac' : 'make',
"   \  },
"   \}
" Bundle 'romainl/vim-qf'
" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
" Bundle 'unblevable/quick-scope'
" Bundle 'inside/vim-search-pulse'
" Define bundles via Github repos
" Bundle 'christoomey/vim-run-interactive'
" Bundle 'croaky/vim-colors-github'
" 主题 solarized
" solarized
" Bundle 'altercation/vim-colors-solarized'
" molokai
" 主题 molokai
"Plugin 'vim-ctrlspace/vim-ctrlspace'
" Bundle 'danro/rename.vim'
" Bundle 'majutsushi/tagbar'
" Bundle 'kchmck/vim-coffee-script'
" Bundle 'Shougo/unite.vim'
"Bundle 'Shougo/vimproc.vim', {
"\ 'build' : {
"\     'windows' : 'tools\\update-dll-mingw',
"\     'cygwin' : 'make -f make_cygwin.mak',
"\     'mac' : 'make',
"\     'linux' : 'make',
"\     'unix' : 'gmake',
"\    },
"\ }
"Plugin 'grep.vim'
"Bundle 'pbrisbin/vim-mkdir'
"Bundle 'scrooloose/syntastic'
"Bundle 'slim-template/vim-slim'
"Bundle 'thoughtbot/vim-rspec'
"Bundle 'tpope/vim-bundler'
"Bundle 'tpope/vim-endwise'
"Bundle 'tpope/vim-fugitive'
"Bundle 'tpope/vim-rails'
"Bundle 'tpope/vim-surround'
"Bundle 'vim-ruby/vim-ruby'
"Bundle 'vim-scripts/ctags.vim'
"Bundle 'vim-scripts/matchit.zip'
"Bundle 'vim-scripts/tComment'
"Bundle 'mattn/emmet-vim'
"Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"'Bundle 'Lokaltog/vim-powerline'
"'Bundle 'godlygeek/tabular'
"'Bundle 'msanders/snipmate.vim'
"'Bundle 'jelera/vim-javascript-syntax'
"'Bundle 'othree/html5.vim'
"'Bundle 'xsbeats/vim-blade'
"'Bundle 'Raimondi/delimitMate'
"'Bundle 'groenewege/vim-less'
"'Bundle 'evanmiller/nginx-vim-syntax'
"'Bundle 'Lokaltog/vim-easymotion'
"'Bundle 'tomasr/molokai'
"'Bundle 'klen/python-mode'
" if filereadable(expand("~/.vimrc.bundles"))
"  source ~/.vimrc.bundles
" endif

"ctrlp{{{
    filetype on
    let g:ctrlp_regexp = 1
    let g:ctrlp_funky_syntax_highlight = 0
    let g:ctrlp_max_height = 15
    let g:ctrlp_extensions = ['funky']
    let g:ctrlp_funky_syntax_highlight = 0
"}}}
" let g:nerdtree_tabs_open_on_console_startup=1
let python_highlight_all=1


"nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
"nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

"set nocompatible
"set hidden
"If you feel brave enough turn off tabline:

"set showtabline=0
" 使用ag作为ctrlp的搜索
if executable('ag')
    let g:ackprg='ag --nogroup --nocolor --hidden -g  --nocolumn'
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor  -g ""'
    let g:ctrlp_use_caching = 0
endif

"{{{
    "let g:airline#extensions#tabline#enabled = 1
    " let g:airline_theme="deus"
    "let g:airline#extensions#tabline#buffer_nr_show = 1
    "let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
    "let g:airline#extensions#tabline#show_tab_nr = 1
    " 要想使用箭头等 需要安装powerline－font 字体 要不然箭头什么回显示乱码
     let g:airline_powerline_fonts = 0
    " 关闭状态显示空白符号计数,这个对我用处不大"
    "if !exists('g:airline_powerline_fonts')
    "        " Use the default set of separators with a few customizations
    "        let g:airline_left_sep='›'  " Slightly fancier than '>'
    "        let g:airline_right_sep='‹' " Slightly fancier than '<'
    "endif
    let laststatus = 2
    "let g:airline_theme = 'solarized'
    let g:airline#extensions#whitespace#enabled = 0
    if !exists('g:airline_symbols')
            let g:airline_symbols = {}
    endif
    "let g:airline#extensions#tabline#left_sep = ' '
    "let g:airline#extensions#tabline#left_alt_sep = '|'
"}}}


"{{{ 配置delimitmate
    " for python docstring ", 特别有用
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
"}}}


"{{{ nertcommenter需要的配置
    filetype plugin on
"}}}

"{{{
    " syntastic 有问题不用了
    " let g:syntastic_python_checkers=['flake8']
    " let g:syntastic_python_flake8_args='--ignore=E501,E225,E124,E712,E116,E131'
    " let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }
    " let g:syntastic_always_populate_loc_list=1
    " let g:syntastic_auto_loc_list=1
    " let g:syntastic_check_on_open=1
    " let g:syntastic_check_on_wq=0
    " autocmd BufWinLeave * if empty(&bt) | lclose | endif
    " let g:syntastic_error_symbol = '✗'
    " let g:syntastic_warning_symbol = '⚠'
"}}}


"{{{ kien/rainbow_parentheses.vim的配置
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]
    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
"}}}

"{{{vim-colors-solarized的配置
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
"}}}
"
"
"{{{ale 的配置

    " Set this=0 自定义底部状态栏.
    let g:airline#extensions#ale#enabled = 0
    call airline#parts#define_function('ALE', 'ALEGetStatusLine')
    call airline#parts#define_condition('ALE', 'exists("*ALEGetStatusLine")')
    let g:airline_section_error = airline#section#create_right(['ALE'])
    let g:ale_statusline_format = ['✗ %d', '⚠  %d', '✔ OK']
    "显示Linter名称,出错或警告等相关信息
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'


    "文件内容发生变化时不进行检查
    " let g:ale_lint_on_text_changed = 'never'
    "打开文件时进行检查
    let g:ale_enabled = 1
    "<Leader>s触发/关闭语法检查
    " ale的配置 Write this in your vimrc file
    let g:ale_set_loclist = 0
    " 如果这个quickfix 不关闭的话 使用ag查询的时候 使用go命令预览 就会被替换
    let g:ale_set_quickfix = 0
    let g:ale_linters = {'python': ['flake8']}
"}}}


" ctrlsf {{{
    let g:ctrlsf_position = 'bottom'
    let g:ctrlsf_ackprg = '/usr/local/bin/ag'
    let g:ctrlsf_winsize = '30%'
     "let g:ctrlsf_extra_backend_args = {
     "   \ 'ag': '-l --nocolor  -g'
     "   \ }
    let g:ctrlsf_auto_close = 1
    let g:ctrlsf_confirm_save = 0
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<CR>",
        \ "openb" : "",
        \ "tab"   : "t",
        \ "tabb"  : "T",
        \ "prevw" : ["<Space>", 'p'],
        \ "quit"  : ["q"],
        \ "next": "n",
        \ "prev": "N",
        \ "pquit" : ["q"],
        \ }
" }}}

" youcompleteMe{{{
    " 回车作为选中
    let g:ycm_autoclose_preview_window_after_completion=1
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
    let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
    let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
" }}}

"" let g:ctrlsf_populate_qflist = 1
 "let g:ctrlsf_auto_close = 1
" let g:ctrlsf_extra_backend_args = {
""        \ 'ag': '-l --nocolor --hidden -g'
""        \ }

" utilsnips{{{
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " 进入对应filetype的snippets进行编辑
    map <leader>us :UltiSnipsEdit<CR>

"}}}


"{{{  这段代码是解决ycm和snips的tab键冲突的问题
    function! g:UltiSnips_Complete()
      call UltiSnips#ExpandSnippet()
      if g:ulti_expand_res == 0
        if pumvisible()
          return "\<C-n>"
        else
          call UltiSnips#JumpForwards()
          if g:ulti_jump_forwards_res == 0
            return "\<TAB>"
          endif
        endif
      endif
      return ""
    endfunction

    function! g:UltiSnips_Reverse()
      call UltiSnips#JumpBackwards()
      if g:ulti_jump_backwards_res == 0
        return "\<C-P>"
      endif

      return ""
    endfunction


    if !exists("g:UltiSnipsJumpForwardTrigger")
      let g:UltiSnipsJumpForwardTrigger = "<tab>"
    endif
    if !exists("g:UltiSnipsJumpBackwardTrigger")
      let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    endif
    au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
    au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
"}}}
"
"{{{ vim-trailiong-white-space
    let g:extra_whitespace_ignored_filetypes = ['ctrlsf', 'qf']
"}}}


" beta {{{
    " pip install yapf
    " python code format
    " format all file
    autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
    " format select block
    autocmd FileType python vnoremap <leader>y :!yapf<Cr>

    " Plug 'posva/vim-vue'

    " Plug 'millermedeiros/vim-esformatter'
    " will run esformatter after pressing <leader> followed by the 'e' and 's'
    " keys
    " nnoremap <silent> <leader>es :Esformatter<CR>
    " vnoremap <silent> <leader>es :EsformatterVisual<CR>

" }}}
autocmd VimEnter * :EMCommandLineNoreMap <C-v> <C-r>+
